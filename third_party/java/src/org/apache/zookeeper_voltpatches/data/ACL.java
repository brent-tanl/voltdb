// File generated by hadoop record compiler. Do not edit.
/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.apache.zookeeper_voltpatches.data;

import org.apache.jute_voltpatches.*;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.Comparator;

public class ACL implements Record, Comparable<ACL> {
    private int perms;
    private Id id;
    public ACL() {
    }
    public ACL(int perms, Id id) {
        this.perms = perms;
        this.id = id;
    }
    public int getPerms() {
        return perms;
    }
    public void setPerms(int m_) {
        perms = m_;
    }
    public Id getId() {
        return id;
    }
    public void setId(Id m_) {
        id = m_;
    }
    @Override
    public void serialize(OutputArchive a_, String tag) throws java.io.IOException {
        a_.startRecord(this,tag);
        a_.writeInt(perms,"perms");
        a_.writeRecord(id,"id");
        a_.endRecord(this,tag);
    }
    @Override
    public void deserialize(InputArchive a_, String tag) throws java.io.IOException {
        a_.startRecord(tag);
        perms = a_.readInt("perms");
        id = new org.apache.zookeeper_voltpatches.data.Id();
        a_.readRecord(id,"id");
        a_.endRecord(tag);
    }
    @Override
    public void writeCSV(CsvOutputArchive a) throws IOException {
        a.startRecord(this,"");
        a.writeInt(perms,"perms");
        a.writeRecord(id,"id");
        a.endRecord(this,"");
    }

    @Override
    public String toString() {
        return toStringHelper();
    }
    public void write(DataOutput out) throws IOException {
        serialize(new BinaryOutputArchive(out), "");
    }
    public void readFields(DataInput in) throws IOException {
        deserialize(new BinaryInputArchive(in), "");
    }
    @Override
    public int compareTo(ACL peer_) {
        return Comparator.comparingInt(ACL::getPerms)
                .thenComparing(ACL::getId)
                .compare(this, peer_);
    }
    @Override
    public boolean equals(Object peer_) {
        if (! (peer_ instanceof ACL)) {
            return false;
        } else {
            return peer_ == this || compareTo((ACL) peer_) == 0;
        }
    }
    @Override
    public int hashCode() {
        int result = 17;
        int ret;
        ret = perms;
        result = 37*result + ret;
        ret = id.hashCode();
        return 37*result + ret;
    }
    public static String signature() {
        return "LACL(iLId(ss))";
    }
}
