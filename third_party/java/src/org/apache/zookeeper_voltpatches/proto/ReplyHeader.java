// File generated by hadoop record compiler. Do not edit.
/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.apache.zookeeper_voltpatches.proto;

import org.apache.jute_voltpatches.*;

import java.io.IOException;
import java.util.Comparator;

public class ReplyHeader extends Record.AbstractRecord<ReplyHeader> {
    private int xid;
    private long zxid;
    private int err;
    public ReplyHeader() {
    }
    public ReplyHeader(int xid, long zxid, int err) {
        this.xid = xid;
        this.zxid = zxid;
        this.err = err;
    }
    public int getXid() {
        return xid;
    }
    public void setXid(int m_) {
        xid = m_;
    }
    public long getZxid() {
        return zxid;
    }
    public void setZxid(long m_) {
        zxid = m_;
    }
    public int getErr() {
        return err;
    }
    public void setErr(int m_) {
        err = m_;
    }
    @Override
    public void serialize(OutputArchive a_, String tag) throws IOException {
        a_.startRecord(this,tag);
        a_.writeInt(xid,"xid");
        a_.writeLong(zxid,"zxid");
        a_.writeInt(err,"err");
        a_.endRecord(this,tag);
    }
    @Override
    public void deserialize(InputArchive a_, String tag) throws IOException {
        a_.startRecord(tag);
        xid = a_.readInt("xid");
        zxid = a_.readLong("zxid");
        err = a_.readInt("err");
        a_.endRecord(tag);
    }

    @Override
    public int compareTo(ReplyHeader peer_) {
        return Comparator.comparingInt(ReplyHeader::getXid)
                .thenComparingLong(ReplyHeader::getZxid)
                .thenComparingInt(ReplyHeader::getErr)
                .compare(this, peer_);
    }
    @Override
    public boolean equals(Object peer_) {
        return peer_ instanceof ReplyHeader && equalsHelper(peer_);
    }
    @Override
    public int hashCode() {
        int result = 17;
        int ret = xid;
        result = 37*result + ret;
        ret = (int) (zxid^(zxid>>>32));
        result = 37*result + ret;
        ret = err;
        return 37*result + ret;
    }
    public static String signature() {
        return "LReplyHeader(ili)";
    }
}
