// File generated by hadoop record compiler. Do not edit.
/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.apache.zookeeper_voltpatches.proto;

import org.apache.jute_voltpatches.*;

import java.io.IOException;
import java.util.Arrays;
import java.util.Comparator;

public class op_result_t implements Record, Comparable<op_result_t> {
    private int rc;
    private int op;
    private byte[] response;
    public op_result_t() {
    }
    public op_result_t(int rc, int op, byte[] response) {
        this.rc = rc;
        this.op = op;
        this.response = response;
    }
    public int getRc() {
        return rc;
    }
    public void setRc(int m_) {
        rc = m_;
    }
    public int getOp() {
        return op;
    }
    public void setOp(int m_) {
        op = m_;
    }
    public byte[] getResponse() {
        return response;
    }
    public void setResponse(byte[] m_) {
        response = m_;
    }
    @Override
    public void serialize(OutputArchive a_, String tag) throws IOException {
        a_.startRecord(this,tag);
        a_.writeInt(rc,"rc");
        a_.writeInt(op,"op");
        a_.writeBuffer(response,"response");
        a_.endRecord(this,tag);
    }
    @Override
    public void deserialize(InputArchive a_, String tag) throws IOException {
        a_.startRecord(tag);
        rc = a_.readInt("rc");
        op = a_.readInt("op");
        response = a_.readBuffer("response");
        a_.endRecord(tag);
    }

    @Override
    public void writeCSV(CsvOutputArchive a) throws IOException {
        a.startRecord(this,"");
        a.writeInt(rc,"rc");
        a.writeInt(op,"op");
        a.writeBuffer(response,"response");
        a.endRecord(this,"");
    }

    @Override
    public String toString() {
        return toStringHelper();
    }
    @Override
    public int compareTo(op_result_t peer_) {
        return Comparator.comparingInt(op_result_t::getRc)
                .thenComparingInt(op_result_t::getOp)
                .thenComparing(op_result_t::getResponse, Utils::compareBytes)
                .compare(this, peer_);
    }
    @Override
    public boolean equals(Object peer_) {
        if (! (peer_ instanceof op_result_t)) {
            return false;
        } else {
            return peer_ == this || compareTo((op_result_t) peer_) == 0;
        }
    }
    @Override
    public int hashCode() {
        int result = 17;
        int ret;
        ret = rc;
        result = 37*result + ret;
        ret = op;
        result = 37*result + ret;
        ret = Arrays.toString(response).hashCode();
        return 37*result + ret;
    }
    public static String signature() {
        return "Lop_result_t(iiB)";
    }
}
