// File generated by hadoop record compiler. Do not edit.
/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.apache.zookeeper_voltpatches.proto;

import org.apache.jute_voltpatches.*;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class SetWatches implements Record<SetWatches> {
    private long relativeZxid;
    private List<String> dataWatches;
    private List<String> existWatches;
    private List<String> childWatches;
    public SetWatches() {
    }
    public SetWatches(
            long relativeZxid,
            List<String> dataWatches,
            List<String> existWatches,
            List<String> childWatches) {
        this.relativeZxid = relativeZxid;
        this.dataWatches = dataWatches;
        this.existWatches = existWatches;
        this.childWatches = childWatches;
    }
    public long getRelativeZxid() {
        return relativeZxid;
    }
    public void setRelativeZxid(long m_) {
        relativeZxid = m_;
    }
    public List<String> getDataWatches() {
        return dataWatches;
    }
    public void setDataWatches(List<String> m_) {
        dataWatches = m_;
    }
    public List<String> getExistWatches() {
        return existWatches;
    }
    public void setExistWatches(List<String> m_) {
        existWatches = m_;
    }
    public List<String> getChildWatches() {
        return childWatches;
    }
    public void setChildWatches(List<String> m_) {
        childWatches = m_;
    }
    @Override
    public void serialize(OutputArchive a_, String tag) throws IOException {
        a_.startRecord(this,tag);
        a_.writeLong(relativeZxid,"relativeZxid");
        a_.startVector(dataWatches,"dataWatches");
        if (dataWatches!= null) {
            for (String e1 : dataWatches) {
                a_.writeString(e1, "e1");
            }
        }
        a_.endVector(dataWatches,"dataWatches");
        a_.startVector(existWatches,"existWatches");
        if (existWatches!= null) {
            for (String e1 : existWatches) {
                a_.writeString(e1, "e1");
            }
        }
        a_.endVector(existWatches,"existWatches");
        a_.startVector(childWatches,"childWatches");
        if (childWatches!= null) {
            for (String e1 : childWatches) {
                a_.writeString(e1, "e1");
            }
        }
        a_.endVector(childWatches,"childWatches");
        a_.endRecord(this,tag);
    }
    @Override
    public void deserialize(InputArchive a_, String tag) throws IOException {
        a_.startRecord(tag);
        relativeZxid=a_.readLong("relativeZxid");
        Index vidx1 = a_.startVector("dataWatches");
        if (vidx1!= null) {
            dataWatches = new ArrayList<>();
            for (; !vidx1.done(); vidx1.incr()) {
                String e1;
                e1=a_.readString("e1");
                dataWatches.add(e1);
            }
        }
        a_.endVector("dataWatches");
        vidx1 = a_.startVector("existWatches");
        if (vidx1!= null) {
            existWatches = new ArrayList<>();
            for (; !vidx1.done(); vidx1.incr()) {
                String e1;
                e1=a_.readString("e1");
                existWatches.add(e1);
            }
        }
        a_.endVector("existWatches");
        vidx1 = a_.startVector("childWatches");
        if (vidx1!= null) {
            childWatches = new ArrayList<>();
            for (; !vidx1.done(); vidx1.incr()) {
                String e1;
                e1=a_.readString("e1");
                childWatches.add(e1);
            }
        }
        a_.endVector("childWatches");
        a_.endRecord(tag);
    }

    @Override
    public void writeCSV(CsvOutputArchive a) throws IOException {
        a.startRecord(this,"");
        a.writeLong(relativeZxid,"relativeZxid");
        a.startVector(dataWatches,"dataWatches");
        if (dataWatches!= null) {
            for (String e1 : dataWatches) {
                a.writeString(e1, "e1");
            }
        }
        a.endVector(dataWatches,"dataWatches");
        a.startVector(existWatches,"existWatches");
        if (existWatches!= null) {
            for (String e1 : existWatches) {
                a.writeString(e1, "e1");
            }
        }
        a.endVector(existWatches,"existWatches");
        a.startVector(childWatches,"childWatches");
        if (childWatches!= null) {
            for (String e1 : childWatches) {
                a.writeString(e1, "e1");
            }
        }
        a.endVector(childWatches,"childWatches");
        a.endRecord(this,"");
    }

    @Override
    public String toString() {
        return toStringHelper();
    }
    @Override
    public int compareTo(SetWatches peer_) {
        throw new UnsupportedOperationException("comparing SetWatches is unimplemented");
    }
    @Override
    public boolean equals(Object peer_) {
        if (!(peer_ instanceof SetWatches)) {
            return false;
        } else {
            return peer_ == this || Comparator.comparingLong(SetWatches::getRelativeZxid)
                    .thenComparing(SetWatches::getDataWatches, Utils::compareLists)
                    .thenComparing(SetWatches::getExistWatches, Utils::compareLists)
                    .thenComparing(SetWatches::getChildWatches, Utils::compareLists)
                    .compare(this, (SetWatches) peer_) == 0;
        }
    }
    @Override
    public int hashCode() {
        int result = 17;
        int ret;
        ret = (int) (relativeZxid^(relativeZxid>>>32));
        result = 37*result + ret;
        ret = dataWatches.hashCode();
        result = 37*result + ret;
        ret = existWatches.hashCode();
        result = 37*result + ret;
        ret = childWatches.hashCode();
        return 37*result + ret;
    }
    public static String signature() {
        return "LSetWatches(l[s][s][s])";
    }
}
