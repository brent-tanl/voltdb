// File generated by hadoop record compiler. Do not edit.
/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.apache.zookeeper_voltpatches.proto;

import org.apache.jute_voltpatches.*;
import org.apache.zookeeper_voltpatches.data.Stat;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class GetChildren2Response extends Record.AbstractRecord<GetChildren2Response> {
    private List<String> children;
    private Stat stat;
    public GetChildren2Response() {
    }
    public GetChildren2Response(List<String> children, Stat stat) {
        this.children = children;
        this.stat = stat;
    }
    public List<String> getChildren() {
        return children;
    }
    public void setChildren(List<String> m_) {
        children = m_;
    }
    public Stat getStat() {
        return stat;
    }
    public void setStat(Stat m_) {
        stat=m_;
    }
    @Override
    public void serialize(OutputArchive a_, String tag) throws IOException {
        a_.startRecord(this,tag);
        a_.startVector(children,"children");
        if (children!= null) {
            for (String e1 : children) {
                a_.writeString(e1, "e1");
            }
        }
        a_.endVector(children,"children");
        a_.writeRecord(stat,"stat");
        a_.endRecord(this,tag);
    }
    @Override
    public void deserialize(InputArchive a_, String tag) throws IOException {
        a_.startRecord(tag);
        Index vidx1 = a_.startVector("children");
        if (vidx1!= null) {
            children=new ArrayList<>();
            for (; !vidx1.done(); vidx1.incr()) {
                String e1;
                e1=a_.readString("e1");
                children.add(e1);
            }
        }
        a_.endVector("children");
        stat = new org.apache.zookeeper_voltpatches.data.Stat();
        a_.readRecord(stat,"stat");
        a_.endRecord(tag);
    }

    @Override
    public int compareTo (GetChildren2Response ignored) throws ClassCastException {
        throw new UnsupportedOperationException("comparing GetChildren2Response is unimplemented");
    }
    @Override
    public boolean equals(Object peer_) {
        if (!(peer_ instanceof GetChildren2Response)) {
            return false;
        } else {
            return peer_ == this || Comparator.comparing(GetChildren2Response::getChildren, Utils::compareLists)
                    .thenComparing(GetChildren2Response::getStat)
                    .compare(this, (GetChildren2Response) peer_) == 0;
        }
    }
    @Override
    public int hashCode() {
        int result = 17;
        int ret;
        ret = children.hashCode();
        result = 37*result + ret;
        ret = stat.hashCode();
        return 37*result + ret;
    }
    public static String signature() {
        return "LGetChildren2Response([s]LStat(lllliiiliil))";
    }
}
