// File generated by hadoop record compiler. Do not edit.
/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.apache.zookeeper_voltpatches.proto;

import org.apache.jute_voltpatches.*;

import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Comparator;

public class RequestHeader implements Record, Comparable<RequestHeader> {
    private int xid;
    private int type;
    public RequestHeader() {
    }
    public RequestHeader(int xid, int type) {
        this.xid = xid;
        this.type = type;
    }
    public int getXid() {
        return xid;
    }
    public void setXid(int m_) {
        xid = m_;
    }
    public int getType() {
        return type;
    }
    public void setType(int m_) {
        type = m_;
    }
    public void serialize(OutputArchive a_, String tag) throws IOException {
        a_.startRecord(this,tag);
        a_.writeInt(xid,"xid");
        a_.writeInt(type,"type");
        a_.endRecord(this,tag);
    }
    public void deserialize(InputArchive a_, String tag) throws IOException {
        a_.startRecord(tag);
        xid=a_.readInt("xid");
        type=a_.readInt("type");
        a_.endRecord(tag);
    }
    @Override
    public String toString() {
        try {
            final ByteArrayOutputStream s = new ByteArrayOutputStream();
            final CsvOutputArchive a_ = new CsvOutputArchive(s);
            a_.startRecord(this,"");
            a_.writeInt(xid,"xid");
            a_.writeInt(type,"type");
            a_.endRecord(this,"");
            return new String(s.toByteArray(), StandardCharsets.UTF_8);
        } catch (Throwable ex) {
            ex.printStackTrace();
        }
        return "ERROR";
    }
    public void write(DataOutput out) throws IOException {
        serialize(new BinaryOutputArchive(out), "");
    }
    public void readFields(DataInput in) throws IOException {
        deserialize(new BinaryInputArchive(in), "");
    }
    public int compareTo (RequestHeader peer_) throws ClassCastException {
        return Comparator.comparingInt(RequestHeader::getXid)
                .thenComparingInt(RequestHeader::getType)
                .compare(this, peer_);
    }
    @Override
    public boolean equals(Object peer_) {
        if (!(peer_ instanceof RequestHeader)) {
            return false;
        } else if (peer_ == this) {
            return true;
        } else {
            return compareTo((RequestHeader) peer_) == 0;
        }
    }
    @Override
    public int hashCode() {
        int result = 17;
        int ret;
        ret = xid;
        result = 37*result + ret;
        ret = type;
        return 37*result + ret;
    }
    public static String signature() {
        return "LRequestHeader(ii)";
    }
}
