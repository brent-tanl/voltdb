// File generated by hadoop record compiler. Do not edit.
/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.apache.zookeeper_voltpatches.proto;

import org.apache.jute_voltpatches.*;

import java.io.IOException;
import java.util.Arrays;
import java.util.Comparator;

public class ConnectRequest extends Record.AbstractRecord<ConnectRequest> {
    private int protocolVersion;
    private long lastZxidSeen;
    private int timeOut;
    private long sessionId;
    private byte[] passwd;
    public ConnectRequest() {
    }
    public ConnectRequest(
            int protocolVersion,
            long lastZxidSeen,
            int timeOut,
            long sessionId,
            byte[] passwd) {
        this.protocolVersion = protocolVersion;
        this.lastZxidSeen = lastZxidSeen;
        this.timeOut = timeOut;
        this.sessionId = sessionId;
        this.passwd = passwd;
    }
    public int getProtocolVersion() {
        return protocolVersion;
    }
    public void setProtocolVersion(int m_) {
        protocolVersion = m_;
    }
    public long getLastZxidSeen() {
        return lastZxidSeen;
    }
    public void setLastZxidSeen(long m_) {
        lastZxidSeen = m_;
    }
    public int getTimeOut() {
        return timeOut;
    }
    public void setTimeOut(int m_) {
        timeOut = m_;
    }
    public long getSessionId() {
        return sessionId;
    }
    public void setSessionId(long m_) {
        sessionId = m_;
    }
    public byte[] getPasswd() {
        return passwd;
    }
    public void setPasswd(byte[] m_) {
        passwd = m_;
    }
    @Override
    public void serialize(OutputArchive a_, String tag) throws IOException {
        a_.startRecord(this,tag);
        a_.writeInt(protocolVersion,"protocolVersion");
        a_.writeLong(lastZxidSeen,"lastZxidSeen");
        a_.writeInt(timeOut,"timeOut");
        a_.writeLong(sessionId,"sessionId");
        a_.writeBuffer(passwd,"passwd");
        a_.endRecord(this,tag);
    }
    @Override
    public void deserialize(InputArchive a_, String tag) throws IOException {
        a_.startRecord(tag);
        protocolVersion = a_.readInt("protocolVersion");
        lastZxidSeen = a_.readLong("lastZxidSeen");
        timeOut = a_.readInt("timeOut");
        sessionId = a_.readLong("sessionId");
        passwd = a_.readBuffer("passwd");
        a_.endRecord(tag);
    }

    @Override
    public int compareTo(ConnectRequest peer_) {
        return Comparator.comparingInt(ConnectRequest::getProtocolVersion)
                .thenComparingLong(ConnectRequest::getLastZxidSeen)
                .thenComparingInt(ConnectRequest::getTimeOut)
                .thenComparingInt(ConnectRequest::getTimeOut)
                .thenComparing(ConnectRequest::getPasswd, Utils::compareBytes)
                .compare(this, peer_);
    }
    @Override
    public boolean equals(Object peer_) {
        return peer_ instanceof ConnectRequest && equalsHelper(peer_);
    }
    @Override
    public int hashCode() {
        int result = 17;
        int ret;
        ret = protocolVersion;
        result = 37*result + ret;
        ret = (int) (lastZxidSeen^(lastZxidSeen>>>32));
        result = 37*result + ret;
        ret = timeOut;
        result = 37*result + ret;
        ret = (int) (sessionId^(sessionId>>>32));
        result = 37*result + ret;
        ret = Arrays.toString(passwd).hashCode();
        return 37*result + ret;
    }
    public static String signature() {
        return "LConnectRequest(ililB)";
    }
}
