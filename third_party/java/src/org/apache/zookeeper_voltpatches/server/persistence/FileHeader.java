// File generated by hadoop record compiler. Do not edit.
/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.apache.zookeeper_voltpatches.server.persistence;

import org.apache.jute_voltpatches.*;

import java.io.IOException;
import java.util.Comparator;

public class FileHeader implements Record<FileHeader> {
    private int magic;
    private int version;
    private long dbid;
    public FileHeader() {
    }
    public FileHeader(int magic, int version, long dbid) {
        this.magic = magic;
        this.version = version;
        this.dbid = dbid;
    }
    public int getMagic() {
        return magic;
    }
    public void setMagic(int m_) {
        magic = m_;
    }
    public int getVersion() {
        return version;
    }
    public void setVersion(int m_) {
        version = m_;
    }
    public long getDbid() {
        return dbid;
    }
    public void setDbid(long m_) {
        dbid = m_;
    }
    @Override
    public void serialize(OutputArchive a_, String tag) throws IOException {
        a_.startRecord(this,tag);
        a_.writeInt(magic,"magic");
        a_.writeInt(version,"version");
        a_.writeLong(dbid,"dbid");
        a_.endRecord(this,tag);
    }
    @Override
    public void deserialize(InputArchive a_, String tag) throws IOException {
        a_.startRecord(tag);
        magic = a_.readInt("magic");
        version = a_.readInt("version");
        dbid = a_.readLong("dbid");
        a_.endRecord(tag);
    }

    @Override
    public String toString() {
        return toStringHelper();
    }
    @Override
    public int compareTo(FileHeader peer_) {
        return Comparator.comparingInt(FileHeader::getMagic)
                .thenComparingInt(FileHeader::getVersion)
                .thenComparingLong(FileHeader::getDbid)
                .compare(this, peer_);
    }
    @Override
    public boolean equals(Object peer_) {
        if (! (peer_ instanceof FileHeader)) {
            return false;
        } else {
            return peer_ == this || compareTo((FileHeader) peer_) == 0;
        }
    }
    @Override
    public int hashCode() {
        int result = 17;
        int ret;
        ret = magic;
        result = 37*result + ret;
        ret = version;
        result = 37*result + ret;
        ret = (int) (dbid^(dbid>>>32));
        return 37*result + ret;
    }
    public static String signature() {
        return "LFileHeader(iil)";
    }
}
