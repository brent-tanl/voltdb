// File generated by hadoop record compiler. Do not edit.
/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.apache.zookeeper_voltpatches.txn;

import org.apache.jute_voltpatches.*;
import org.apache.zookeeper_voltpatches.proto.SetDataRequest;

import java.io.IOException;
import java.util.Comparator;

public class TxnHeader extends Record.AbstractRecord<TxnHeader> {
    private long clientId;
    private int cxid;
    private long zxid;
    private long time;
    private int type;
    public TxnHeader() {
    }
    public TxnHeader(
            long clientId,
            int cxid,
            long zxid,
            long time,
            int type) {
        this.clientId = clientId;
        this.cxid = cxid;
        this.zxid = zxid;
        this.time = time;
        this.type = type;
    }
    public long getClientId() {
        return clientId;
    }
    public void setClientId(long m_) {
        clientId = m_;
    }
    public int getCxid() {
        return cxid;
    }
    public void setCxid(int m_) {
        cxid = m_;
    }
    public long getZxid() {
        return zxid;
    }
    public void setZxid(long m_) {
        zxid = m_;
    }
    public long getTime() {
        return time;
    }
    public void setTime(long m_) {
        time = m_;
    }
    public int getType() {
        return type;
    }
    public void setType(int m_) {
        type = m_;
    }
    @Override
    public void serialize(OutputArchive a_, String tag) throws IOException {
        a_.startRecord(this,tag);
        a_.writeLong(clientId,"clientId");
        a_.writeInt(cxid,"cxid");
        a_.writeLong(zxid,"zxid");
        a_.writeLong(time,"time");
        a_.writeInt(type,"type");
        a_.endRecord(this,tag);
    }
    @Override
    public void deserialize(InputArchive a_, String tag) throws IOException {
        a_.startRecord(tag);
        clientId = a_.readLong("clientId");
        cxid = a_.readInt("cxid");
        zxid = a_.readLong("zxid");
        time = a_.readLong("time");
        type = a_.readInt("type");
        a_.endRecord(tag);
    }

    @Override
    public int compareTo (TxnHeader peer_) {
        return Comparator.comparingLong(TxnHeader::getClientId)
                .thenComparingLong(TxnHeader::getCxid)
                .thenComparingLong(TxnHeader::getZxid)
                .thenComparingLong(TxnHeader::getTime)
                .thenComparingLong(TxnHeader::getType)
                .compare(this, peer_);
    }
    @Override
    public boolean equals(Object peer_) {
        return peer_ instanceof TxnHeader && equalsHelper(peer_);
    }
    @Override
    public int hashCode() {
        int result = 17;
        int ret;
        ret = (int) (clientId^(clientId>>>32));
        result = 37*result + ret;
        ret = cxid;
        result = 37*result + ret;
        ret = (int) (zxid^(zxid>>>32));
        result = 37*result + ret;
        ret = (int) (time^(time>>>32));
        result = 37*result + ret;
        ret = type;
        return 37*result + ret;
    }
    public static String signature() {
        return "LTxnHeader(lilli)";
    }
}
